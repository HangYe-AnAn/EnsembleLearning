% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EnsembleLearning.R
\name{EnsembleLearning}
\alias{EnsembleLearning}
\title{Ensemble Learning Function}
\usage{
EnsembleLearning(X, y, model_types, return_accuracy = FALSE)
}
\arguments{
\item{X}{A matrix or data frame of predictor variables.}

\item{y}{A vector representing the response variable, which should be binary for classification tasks
and continuous for regression tasks.}

\item{model_types}{A character vector specifying the types of models to train.
Valid options include "linear", "ridge", "lasso", "elastic", and "svm". Ex. model_types = c("linear","ridge", "lasso", "elastic")}

\item{return_accuracy}{A logical flag that determines whether to calculate and return the
accuracy of the predictions (for classification tasks only). Default is FALSE.}
}
\value{
A list containing:
\itemize{
  \item \code{prediction}: The aggregated prediction from the ensemble. For classification,
  this is based on majority voting; for regression, it is the average of the predictions.
  \item \code{models}: Details of all the individual models trained during the ensemble process.
  This allows for further inspection and analysis.
  \item \code{accuracy} (only for svm): The accuracy of the ensemble predictions, provided if
  \code{return_accuracy} is TRUE and the task is classification.
}
}
\description{
This function implements an ensemble learning approach that allows users to train
multiple models on the same dataset and aggregate the predictions into a single output.
It supports both regression and classification tasks.
}
\details{
The `EnsembleLearning` function trains each specified model using the provided data,
then aggregates their predictions into a single result. The aggregation method depends
on the type of task:
\itemize{
  \item \strong{Classification}: Uses majority voting to determine the final class.
  \item \strong{Regression}: Calculates the mean of all model predictions.
}
This method enhances prediction robustness by combining the unique strengths of
different modeling approaches and reducing the risk of overfitting.
}
\examples{
library(simpleEnsembleGroup7)
data(mtcars)
mtcars$high_mpg <- as.numeric(mtcars$mpg > median(mtcars$mpg))
X <- mtcars[, c("wt", "hp", "qsec", "drat")]
y <- mtcars$high_mpg
results <- EnsembleLearning(X, y, c("linear", "ridge", "svm"), return_accuracy=TRUE)
print(results$prediction)
if (!is.null(results$accuracy)) {
  print(paste("Accuracy:", results$accuracy))
}


}
